import { AuthService } from './../_services/auth.service';
import { ResearchService } from './../_services/research.service';
import { MalwareService } from './../_services/malware.service';
import { Component, OnInit, ViewChild, Inject } from '@angular/core';
import { ModulesService } from '../_services/modules.service';
import {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';
import { DialogremovemalwareComponent } from '../dialogremovemalware/dialogremovemalware.component';
import { getMatIconFailedToSanitizeLiteralError, MatListOption } from '@angular/material';
import { SelectionModel } from '@angular/cdk/collections';


export interface DialogData {
  filename: string;
  id: number;
}

@Component({
  selector: 'app-malwares',
  templateUrl: './malwares.component.html',
  styleUrls: ['./malwares.component.css']
})
export class MalwaresComponent implements OnInit {
  
  textValue = 'initial value';
  allMalwares: any;
  malware:any;

  user: string;
  
  
 
  @ViewChild('malwaresList') malwaresList;

  constructor(private malwareService : MalwareService,private researchService : ResearchService,
     private modulesService: ModulesService, public dialog: MatDialog,private authService: AuthService) { }

  ngOnInit(  ) {
    this.user=this.authService.decodedToken.unique_name;
    this.malwareService.getAll().subscribe(res => this.allMalwares = res);

    this.malwaresList.selectedOptions = new SelectionModel<MatListOption>(false);
  }

  setMalware(malware: any) {
    this.malware = malware;
  }

openDialog(malwareId, filename): void {
  const dialogRef = this.dialog.open(DialogremovemalwareComponent, {
    width: '250px',
    data: {id: malwareId, filename : filename}
  });

  dialogRef.afterClosed().subscribe(result => {

    console.log('The dialog was closed'+JSON.stringify(result) );

    if(result!=null)
    { 
    console.log("Nie jest null");
    this.malwareService.removeMalware(result.id).subscribe(response => {
      console.log(response);
      })
    }
  });
}

isAuthor(orginalAuthor: string): boolean{
  if(orginalAuthor==this.user) return true;
  else return false;
}

isDescribed():boolean{
  if(this.malware!=null) return true;
  else return false;
}
}