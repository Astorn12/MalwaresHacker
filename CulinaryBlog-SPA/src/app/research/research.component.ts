import { AlertifyService } from './../_services/alertify.service';
import { AuthService } from './../_services/auth.service';
import { Component, OnInit, ViewChild } from '@angular/core';
import { MalwareService } from '../_services/malware.service';
import { ResearchService } from '../_services/research.service';
import { ModulesService } from '../_services/modules.service';
import { MatIconRegistry } from '@angular/material';
import { DomSanitizer } from '@angular/platform-browser';
import { Alert } from 'selenium-webdriver';

@Component({
  selector: 'app-research',
  templateUrl: './research.component.html',
  styleUrls: ['./research.component.css']
})
export class ResearchComponent implements OnInit {

  textValue = 'initial value';
  allMalwares: any;
  
  malware: any;
  module: any;
  allModules: any;
 
  @ViewChild('malwaresList') malwaresList;
  @ViewChild('modulesList') modulesList;
  constructor(private malwareService : MalwareService,private researchService : ResearchService, private modulesService: ModulesService,
    iconRegistry: MatIconRegistry, sanitizer: DomSanitizer,private alertifyService: AlertifyService) 
    {
      iconRegistry.addSvgIcon(
          'knife',
          sanitizer.bypassSecurityTrustResourceUrl('assets/img/knife.svg'));
    }


  

  ngOnInit(  ) {
    this.malwareService.getAll().subscribe(res => this.allMalwares = res);
    this.getAllModules();

  }
  getAllModules() {
    this.modulesService.getModules().subscribe(result => {this.allModules = result["modules"];});
  }
  setMalware(malware: any) {
    this.malware = malware;
  }

  setModule(module) {
    this.module = module;
  }
  send()
  {
    const researchGroup = new Array();
    for (const malware of this.malwaresList.selectedOptions.selected)
    {
      for(const module of this.modulesList.selectedOptions.selected)
      {
      const choise = {
        id: malware.value['_id'],
        name:  module.value['name']
      }
      console.log("T1: "+choise.id+"  "+ choise.name);
      researchGroup.push(choise);
       }
      }
  

  this.researchService.researchMany(researchGroup).subscribe(response=>{
   console.log(response);
   this.alertifyService.success("Researches have been sent.");});

}


selectAllMalwares(checked: boolean)
{
  console.log(checked);
  if(!checked) {
    this.malwaresList.selectAll();
  } else {
    this.malwaresList.deselectAll();
  }

}

selectAllModules(checked: boolean)
{
  console.log(checked);

  if(!checked) {
    this.modulesList.selectAll();
  } else {
    this.modulesList.deselectAll();
  }
}
}
