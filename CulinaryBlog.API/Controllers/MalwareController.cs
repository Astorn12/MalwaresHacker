using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using CulinaryBlog.API.Data;
using CulinaryBlog.API.DTOs;
using CulinaryBlog.API.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;


namespace CulinaryBlog.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
   
    public class MalwareController : ControllerBase
    {
    
        private readonly IMalwareRepository _repo;


        public MalwareController(IMalwareRepository repo)
        {
            this._repo = repo;
        }
        [HttpPost("add")]
        public async Task<IActionResult> AddMalware()
        {
            System.Console.WriteLine("Jestem");
            var file = Request.Form.Files[0];
            foreach(var t in Request.Form.Keys)
            {
                System.Console.WriteLine(t);
            }

        var dict = Request.Form.ToDictionary(x => x.Key, x => x.Value.ToString());

            System.Console.WriteLine("Win: "+file.FileName);
            MalwareDto malwareDto= new MalwareDto();
            System.Console.WriteLine("Chcą coś dodać2");
            System.Console.WriteLine(JsonConvert.SerializeObject(malwareDto));
             Malware malware= new Malware(){
                Name=dict["name"],
                Author=dict["author"] 
            };

            using (var ms = new MemoryStream())
            {
            file.CopyTo(ms);
            malware.Blob = ms.ToArray();
            }
            System.Console.WriteLine("Malware" +malware.ToString());
           
            
            await _repo.InsertOne(malware);
          
            return StatusCode(201);
        }
        [HttpGet("getall")]
        public async Task<IActionResult> GetAllMalwares()
        {
            System.Console.WriteLine("Chcę pobrać wszystkie");
            var malwares=await _repo.GetAll();
            foreach (var item in malwares)
            {
                System.Console.WriteLine("collect "+item);
            }
            return Ok(malwares);
        }

        [HttpDelete("remove/{id}")]
        public async Task<OkObjectResult> RemoveMalware(string id)
        {
            System.Console.WriteLine("Controllet remove "+id);
           var response=await _repo.Remove(id);
           return Ok(response);
        }
    }
}
