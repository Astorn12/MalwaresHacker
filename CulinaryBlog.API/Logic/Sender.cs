using System;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using CulinaryBlog.API.Models;

namespace CulinaryBlog.API.Logic
{
    public class Sender
    {
         static String sendingUrl = "http://10.1.53.114:5002/upload";
        public async Task SendMalewareAsync(Malware malware)
        {
            
            using (var client = new HttpClient())
            {
                var response = await client.PostAsync(
                   sendingUrl,
                     new StringContent(malware.GetJson(), Encoding.UTF8, "application/json"));
                Console.WriteLine(response.ToString());
            }
            
        }

        public void TestSend(Malware malware)
        {
            Upload(sendingUrl, null, null, malware.GetJson());
        }

        private async Task<System.IO.Stream> Upload(string actionUrl, string paramString, Stream paramFileStream, String paramFileBytes)
        {
           return await this.Upload(actionUrl, paramString, paramFileStream, Encoding.ASCII.GetBytes(paramFileBytes));

        }
        private async Task<System.IO.Stream> Upload(string actionUrl, string paramString, Stream paramFileStream, byte[] paramFileBytes)
        {

            //HttpContent stringContent = new StringContent(paramString);
            //HttpContent fileStreamContent = new StreamContent(paramFileStream);
            HttpContent bytesContent = new ByteArrayContent(paramFileBytes);
            using (var client = new HttpClient())
            using (var formData = new MultipartFormDataContent())
            {
                //formData.Add(stringContent, "param1", "param1");
                //formData.Add(fileStreamContent, "file1", "file1");
                formData.Add(bytesContent, "file", "file2");
                var response = await client.PostAsync(actionUrl, formData);
                if (!response.IsSuccessStatusCode)
                {
                    return null;
                }
                return await response.Content.ReadAsStreamAsync();
            }
        }
    }
}