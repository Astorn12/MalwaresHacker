using System.Collections.Generic;
using System.Threading.Tasks;
using CulinaryBlog.API.DTOs;
using CulinaryBlog.API.Models;
using MongoDB.Bson;
using MongoDB.Driver;
using MongoDB.Driver.GridFS;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;

namespace CulinaryBlog.API.Data
{
    public class MalwareRepository : IMalwareRepository
    {
       
        public IMongoDatabase Database { get; }
        public MongoClient _client { get; }

        public IGridFSBucket bucket { get; set; }

        public MalwareRepository(MongoClient client)
        {

            _client = client;
            Database = client.GetDatabase("local");
            this.bucket = new GridFSBucket(Database);
        }
        public async Task<MongoDB.Bson.ObjectId> InsertOne(Malware model)
        {
            
            ObjectId id=  await bucket.UploadFromBytesAsync(model.Name,model.Blob);
            var collectionName = GetCollectionName();
            var collection = Database.GetCollection<Malware>(collectionName);
            var filterDefinition = Builders<Malware>.Filter.Where(w => w.Id==id);
            var updateDefinition = Builders<Malware>.Update
            .Set(d => d.Author, model.Author);
            await collection.UpdateOneAsync(filterDefinition,updateDefinition);
            return id;
            // var collectionName = GetCollectionName();
            //var collection = Database.GetCollection<Malware>(collectionName);
            // await collection.InsertOneAsync(model);
        }

        public async Task<IEnumerable<MalwareC>> GetAll()
        {
            var collectionName = GetCollectionName();
            System.Console.WriteLine("Collection name " + collectionName);
            var collection = Database.GetCollection<MalwareC>(collectionName);
            return await collection.Find(_ => true).ToListAsync();
        }

        public async Task<IEnumerable<Malware>> GetByName(string malwareName)
        {
            var collectionName = GetCollectionName();
            var collection = Database.GetCollection<Malware>(collectionName);
            return await collection.Find(x => x.Name == malwareName)
                        .ToListAsync();
        }

        public async Task<IEnumerable<Malware>> GetById(int malwareId)
        {
            var collectionName = GetCollectionName();
            var collection = Database.GetCollection<Malware>(collectionName);
            return await collection.Find(x => x.Name == "słońce")
                        .ToListAsync();
        }

        private static string GetCollectionName()
        {
            return "fs.files";
        }

        public async Task<DeleteResult> Remove(string id)
        {
            System.Console.WriteLine("Usuwa "+id);
             var collectionName = GetCollectionName();
            var collection = Database.GetCollection<Malware>(collectionName);
             ObjectId _id= new ObjectId(id);
            var filter= Builders<Malware>.Filter.Eq("_id", _id);
           
            return await collection.DeleteOneAsync(filter);
        }
    }
}