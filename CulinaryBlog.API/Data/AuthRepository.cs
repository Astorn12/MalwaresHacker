using System;
using System.Linq;
using System.Threading.Tasks;
using CulinaryBlog.API.Models;
using Microsoft.EntityFrameworkCore;

namespace CulinaryBlog.API.Data
{
    public class AuthRepository : IAuthRepository
    {
        private readonly DataContext _context;
        public AuthRepository(DataContext context)
        {
            this._context = context;
        }
#region Authorization Business Methods
        public async Task<User> Login(string name, string password)
        {
            User user = await _context.Users.FirstOrDefaultAsync(x=>x.Nick==name);

            if(user==null) return null;

            if(!VerifyPassword(password,user.PasswordHash,user.PasswordSalt))
                return null;

            return user;
                
        }

        public async Task<User> Register(User user, string password)
        {
            byte[] passwordHash,passwordSalt;

            CreatePasswordHash(password,out passwordHash,out passwordSalt);

            user.PasswordHash=passwordHash;
            user.PasswordSalt=passwordSalt;

            await _context.Users.AddAsync(user);
            await _context.SaveChangesAsync();

            return user;
        }
        public async Task<bool> UserExist(string name)
        {
           if(await _context.Users.AnyAsync(x=>x.Nick==name)) return true;
           else return false;
        }
#endregion


#region SupportedMethods
        private bool VerifyPassword(string password, byte[] passwordHash, byte[] passwordSalt)
        {
            using(var passwordVerificator= new System.Security.Cryptography.HMACSHA512(passwordSalt))
            {
                var computedHash=passwordVerificator.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));

                if(HashesComparison(passwordHash,computedHash))
                {
                    return true;
                }
                else return false;

            }
        }

        private bool HashesComparison(byte[] passwordHash, byte[] computedHash)
        {
            for(int i=0;i<passwordHash.Length;i++)
            {
                if(passwordHash[i]!=computedHash[i]) return false;
            }
            return true;
        }

        private void CreatePasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt)
        {
            using(var hashMaker=new System.Security.Cryptography.HMACSHA512())
            {
                passwordSalt=hashMaker.Key;
                passwordHash=hashMaker.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));

            }
        }
#endregion       
    }
}